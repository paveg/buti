// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gamePlayers GamePlayer[]
}

model Parlor {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sessions  GameSession[]
}

model GameSession {
  id        String   @id @default(cuid())
  parlorId  String
  parlor    Parlor   @relation(fields: [parlorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rule      Rule?
  games     Game[]
}

model Game {
  id          String       @id @default(cuid())
  date        DateTime
  sequence    Int
  playerCount Int
  sessionId   String
  session     GameSession  @relation(fields: [sessionId], references: [id])
  players     GamePlayer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([sessionId, sequence])
}

model GamePlayer {
  id        String   @id @default(cuid())
  gameId    String
  playerId  String
  score     Int      @default(25000)
  rank      Int // @db.TinyInt(1) 1,2,3,4
  killer    Boolean // 飛ばした人
  killed    Boolean // 飛ばされたかどうか
  game      Game     @relation(fields: [gameId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id            String      @id @default(cuid())
  uma           String      @default("10-30") // 5-10, 10-20, 10-30, 20-30
  oka           Int         @default(20000) // ((score * playerCount) + oka) / playerCount = initial score
  killScore     Int         @default(10000)
  chip          Int         @default(2000)
  gameSessionId String      @unique
  session       GameSession @relation(fields: [gameSessionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
