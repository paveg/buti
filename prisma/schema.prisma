// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Member {
    id        String       @id @default(cuid())
    name      String
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    results   GameResult[]
    TipResult TipResult[]
}

model GameResult {
    id        String   @id @default(cuid())
    game      Game     @relation(fields: [gameId], references: [id])
    gameId    String
    member    Member   @relation(fields: [memberId], references: [id])
    memberId  String
    point     Int
    rank      Int // @db.TinyInt(1)
    kill      Boolean  @default(false) // @db.TinyInt(1)
    negative  Boolean  @default(false) // @db.TinyInt(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId])
    @@index([gameId])
    @@index([memberId, gameId])
}

model Game {
    id        String       @id @default(cuid())
    date      DateTime
    parlor    Parlor       @relation(fields: [parlorId], references: [id])
    parlorId  String
    rule      Rule         @relation(fields: [ruleId], references: [id])
    ruleId    String
    seatCost  Int
    results   GameResult[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    TipResult TipResult[]
}

model TipResult {
    id       String @id @default(cuid())
    quantity Int    @default(20)
    member   Member @relation(fields: [memberId], references: [id])
    memberId String
    game     Game   @relation(fields: [gameId], references: [id])
    gameId   String

    @@unique([memberId, gameId])
}

model Parlor {
    id        String   @id @default(cuid())
    name      String
    games     Game[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Rule {
    id             String   @id @default(cuid())
    rate           Int      @default(50)
    uma            Int      @default(0) // @db.TinyInt(3)
    defaultPoint   Int      @default(25000)
    referencePoint Int      @default(30000)
    tip            Int      @default(0)
    games          Game[]
    killBonus      Boolean  @default(true) // @db.TinyInt(1)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
